- TODO / NOTES:
        
        - next steps 
            - need to finish calling of error/success callbacks within DB_Syncer developer-accessible functions
              (client) - especially in sync()!  This will take out the todo item below!

            - allow developer to detect sync error - I think this will need to be done with a callback passed
              to sync()
            
        - locking of the database (on both ends) if a sync is happening -- in other words, handle the case
              of a sync being initiated while a sync is in progress
            - prevent phone from sleeping during sync
            
            
         

          
KNOWN BUGS:

          - bug after rewriting sync reducer to break inner for loop if no repeat (may be coincindental): 
          PRIMARY KEY error; a record on client should have its ID changed, but its not, and when server sends a
          record with same id (that should have been changed on client) PRIMARY KEY error occurs; sync records
          indicating that the record wasn't synced were still present; did another sync with no problems.
          But two syncs shouldn't be necessary.       

CODE CLEANUP:
        - put testing files in a separate directory (i.e. dbstest.js, etc.)        

        - make sure the arguments for phonegap database function callbacks (transaction, executeSql) are
          correct (i.e. tx, err)
          
        - remove any unecessary variables, class properties, methods, old code
        
        - remove extra code having to do with logical deletes - log. deletes should be able to be implemented 
          independent of my code since they are bascally just an update.  Rewrite code for "deletes" for
          actual deletes.  If a developer uses logical deletes, they will be treated as updates automatically
          due to triggers
       
         - on server: put any interactions with the database in DB_Syncer as either a static function or method, 
        in good MVC fashion.  DB_Syncer_listener than acts as the controller, DB_Syncer as the model.
        
         - better consistency in naming of items in JSON object sent by server during client to server and
          server to client --> different names can make debugging confusing (i.e. 'table' vs 'table_name', etc.)
         
         - download jQuery & jQuery mobile and have located LOCALLY so that if not connected to web can still
         load these   
            
MAYBE:

        - need to allow a sync to be initiated on server end - need to code DB_Syncer::sync()
           - may not make sense since we can't assume the server can't assume the client is "up" at any
             given time
       
        - should write database comparer
       
             
        - ability to do a full sync, not just an "incremental" sync -- databases on both ends will be compared
            and synced.  This would require timestamps to be in the data tables.
                - this would also allow a database to be essentially "copied" from client to server or vice
                versa on initial setup.  So if dbs is being used for an app for an existing website, the web
                database can be copied to the client (for a particular user of course).  And if an existing
                app is implementing offline data sync, it can copy its database to the server.
                
              
          
            
MISC NOTES:

        - Debugging note: if you need to see messages from DB_Syncer_listener on the console, you have to
          change the datatype argument in the $.post function on the client to "text" instead of "json"      


            
SYNC ALGORITHM:

Also, see http://coenraets.org/blog/2012/05/simple-offline-data-synchronization-for-mobile-web-and-phonegap-applications/ ---note this is unidirectional (server to client); would need to extend to make bidirectional

When any record is deleted, added, or updated on device, add_sync_action() is called, which adds a record
in the sync_actions table defined as follows:
    CREATE TABLE IF NOT EXISTS sync_actions (
        id INTEGER NOT NULL PRIMARY KEY AUTO_INCREMENT, 
        table VARCHAR(20), 
        record_id INTEGER NOT NULL,
        sync_action VARCHAR(20))
        
    sync_action can be one of the following: "insert", "delete", or "update"


When a sync is initiated, either by user or by some other trigger (opening the app, perhaps), here's what should happen:

    (On device)
    For each row in the sync_actions table on the device {
        call device_sync_action() on the server passing the date from the first row of the table to it AND 
            data from the respective table AND the highest id from that table
        wait for the server's response (callback function in $.post)
        (in callback:)
            if (not successful) {
                report an error
                return;
            }

            if (action is delete) {
                delete the device record that was marked for deletion (via to_be_deleted)
            }
            else if (action is insert) {
                
                if (id had to be changed by server) {
                    change the id of the record (on local db) that was synced the new id
                        [there shouldn't be a conflict, but error check just in case!]
                }
            }
            // Shouldn't need to do anything specific on an update action
            
            delete the current sync_action record from the local database
                
                        
     }
     While (server still has sync_actions) {
        call server_sync_action()
        wait for server's response (data from server should include
        ***NEED TO FINISH
     
     
     }
                
            
        
        
        
        
        
        
        
    (On server)
    device_sync_action() receives data from device (one row of data from device's sync_actions data and table data)
   if (action is insert) {
        insert the record in the server's database explicity using device table's id#
        if (there was an error due to an id# conflict) {
            [this means new records have been added on both device & server]
            insert the record in the server's database explicitly setting id as device_highest_id + 1
            if (there's still an error to an id# conflict) {
                [this means there are more records on server than device]
                insert the record in the server's database letting SQL AUTO_INCREMENT do its job
            }
        }
            
        send an indicator back to the device if the insert was successful or not AND the insert_id so that
          device can have the same insert_id in its database
        END
            
    }

    if (action is delete) {
        delete the record from the server's database            
        send an indicator back to the device if the delete was successful or not
        END
     
    }

    if (action is update) {
        check the timestamp of the actual table data and set flag server_version_newer as TRUE or FALSE 
               accordingly
 
        if (server_version_newer) {
            send the device an indicator that the server version is more recent, and the data from this entry
            END
        }
        else {
            update the server's record with the table data from the device
            send an indicator back to the device if the update was successful or not
            END
        }
        
    
    }
    
    
    server_sync_action() {
        
    
    }
